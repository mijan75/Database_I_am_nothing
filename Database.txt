Select  Query 

1 . select column_name, column_name from table_name ;
2 . select * from table_name;

Description 
1 . This query gives you data from the table which column you selected.
2.  This query gives you all data from the table you selected.

Example :
1. select CustomerName,city frm Customers ;
2. select * from Customers;

Distinct Query 

1. select distinct column_name, column_name from table_name ;

Description 
1. This query will never give you duplicate data from the table that you selected.

Example :
1. select distinct City from Customers ;

Where Query 

1.  Select column_name, column_name from table_name where column_name operator value;

Description : 
1.  This query will give you selected data which fulfill the condition which is written after the where clause

Example : 
1. select * from Customers where Country = '' Bangladesh '' ;




And Or Query

1. select * from table_name where column_name operator value and column_name operator value ;
2. select * from table_name where column_name operator value or column_name operator value ;

Description : 
1. This query will give you data which fulfill two condition.
2.  This query will give you data which fulfill any of one condition.

Example : 
1. select * from Customers where Country = '' Bangladesh '' and Country '' India '' ;
2. select * from Customers where Country = '' Bangladesh '' or Country '' India '' ;

Order By Query 

1. select column_name , column_name from table_name order by column_name asc,desc ;

Description :
1. This will give you sorted data ascending or descending order.

Example : 
1. select * from Customer order by County asc ;
2. select * from Customer order by Country desc ;
3. select * from Customer order by Country , CustomerName;
4. select * from Customer order by Country asc, CustomerName desc;

Insert Query

1. insert into table_name values (value1, value2,……..) ;
2. insert into table_name (column_name,column_name,……) values (value1, value2, value3) ;



Description :
1. This query insert data into the table.
2. This query also inset the data into the table but the difference is it specifies both the column name and the values.

Example :
1. inset into Customers (CustomerName, Country) values (''Mijanur Rahaman '' , '' Bangladesh '') ;

Update Query :

1. update table_name set column1 = value1, column2 = value2,...
where some_column = some_value;

Description :
1. This query will update the data of the table which is selected.
2. For this query where condition is must.
3. This query work with the data of the table.

Example : 
1. update Customers set ContactName=''' Mijanur Rahaman '', City = '' Rangpur '' where CustomerName= '' Rashel Mahmud '' ;

Delete query : 

1. delete from table_name where some_column = some_value ;
2. delete from table_name ;
3. delete * from table_name ;

Description :
1. This query delete a particular row in the table.
2. This query will delete all the data from the table.
3. This query will delete all the data from the table.
4. This query work with the data of the table.

Example :
1. delete from Customer where CustomerName = '' Mijan '' and ContactName = '' Mim '' ;

Limit Query :

1. select * from table_name limit value ;

Description :
1. This query will give you top data from your table according to you value in the query.

Example :
1. select * from Customer limit 10;

Wildcard Query :

1. select column_name from table_name where column_name like pattern ;

Description :
1. This query will give you data which math with the pattern.
2. s% means something start with s.
3. %s means something ends with s.
4. %land% means something containing in the data.
5. ''_land'' means something start with anything but after the first letter it contains land;
6. ''M_j_n '' means start with M but in the _ space there can be anything.

Example :
1. select * from Customer  like %jan% ;
2. select * from Customer not like %jan% ;
3. select * from Customer like ''_ijan '' ;
4. select * from Customer like '' M_j_n '' ;

In Query :

1. select column_name from table_name where column_name in (value1,value2) ;

Description :
1. This query will give you data where name contains value1 , value2.

Example :
1. select * from Customer where City in ('' Dahaka '', '' Rangpur '') ;

Between Query

1. select column_name from table_name where column_name between value1 and value2 ;

Description :
1. This query will give you data including value1 and value2 and also the data between them

Example :
1. select * from Products where Price between 10 and 20 ;
2. select * from Products where Price not between 10 and 20 ;
3. select * from Products where (Price between 10 and 20) and not Category in (1,2,3) ;
4. select * from products where ProductName between '' C '' and '' M '' ;
5. select * from products where ProductName not between '' C '' and '' M '' ;
6. select * from Orders where OrderDate between #07/04/1996# AND #07/09/1996# ;

Aliases Query

1. select column_name as alias_name from table_name ;

Description : 
1. This query will give a temporary name of your column.

Example :
1. select CustomerName as name from Customer ;

Inner Join Query :

1. select Customer.CustomerName Order.OrderId from Customer inner join Order on Customer.CustomerId = Order.OrderId ;


Description :
1. This query join two table according to the condition which written on the last.

Example : 
1. select Customer.CustomerName Order.OrderId from Customer inner join Order on Customer.CustomerId = Order.OrderId ;

Left Inner Join Query 

1. select Customers.CustomerName, Orders.OrderId from Customers left join Orders on Customers.CustomerID = Orders.CustomerID;

Description : 
1. This query join two table according to the condition but difference is this query include all data from the left table.

Example : 
1. select Customers.CustomerName, Orders.OrderId from Customers left join Orders on Customers.CustomerID = Orders.CustomerID;

Right Inner Join Query

1. select Customers.CustomerName, Orders.OrderId from Customers right join Orders on Customers.CustomerID = Orders.CustomerID ;

Description :
1. This query join two table according to the condition but difference is this query include all data from the right table.

Full Join

1. select Customers.CustomerName, Orders.OrderId from Customers left join Orders on Customers.CustomerID = Orders.CustomerID union select Customers.CustomerName, Orders.OrderId from Customers right join Orders on Customers.CustomerID = Orders.CustomerID;



Description :
1. This query join the all data from the two table.
2. We use union as a addition.

Example :
1. select Customers.CustomerName, Orders.OrderId from Customers left join Orders on Customers.CustomerID = Orders.CustomerID union select Customers.CustomerName, Orders.OrderId from Customers right join Orders on Customers.CustomerID = Orders.CustomerID;

Union Query

1. select column_name from table1 union select column_name from table2 ;
2. select column_name from table1 union all select column_name from table2 ;

Description :
1. This query add distinct data from the two table.
2. This query add all data (without distinct) data from the two table.

Example :  
1. select City from Customers union select City from Suppliers order by City ;
2. select City from Customers union all select City from Suppliers order by City ;

Insert Into Query

1. insert into table2 (column_name,column_name) select column_name1, column_name2 from table_name1;

Description :
1. This query will copy data from one table to another table,

Example :
1. insert into Customer (CustomerName, Country) select SuppliersName , Country from Suppliers where Country = '' Germany '' ;

Create DB Query

1. create database database_name ;

Description : 
1. This query will make a database for you.

Example :
1. create database CustomerInformation ;

Create Table Query

1. create table table_name (column_name1 data_type (size), column_name2 data_type (size)……..);

Description :
1. This query will make a table for you according to the table name and the data type.

Example :
1. create table Customer (Customer name varchar (10), CustomerId int) ;

Constrains

1. create table table_name ( column_name1 data_type (size) constraint_name ,  column_name2 data_type (size) constraint_name, column_name3 data_type (size) constraint_name……….) ;

Description :
1. This query will create a table with some constrains .

Example : 
1. create table Customer (CutomerName int primary key,……..) ;

Not Null Query

1. create table table_name (Column_name data_type (size) not null,……) ;


Description :
1. This query will make a table with a column name and you can never add a null value in that column.

Example :
1. create table Customer (CustomerId int not null, ………) ;

Unique Query

1. create table table_name (column_name data_type (size) unique,…….) ;

Description : 
1. This query will make a column and it will be uniquely identified.

Example :
1. create table Customer (CustomerId int unique, ………) ;
2. alter table Customer add unique (CustomerId,……) ;
3. alter table Customer drop index uc_CustomerId ;

Primary Key Query

1. create table table_name (column_name1 int primary key,……) ;

Description :
1. This query will make a column in the table and you can't never add a duplicate value in that column.

Example :
1. create table Customer ( CustomerId int primary key,…….) ;
2. alter table Customer add primary key (CustomerId) ;
3. alter table Customer drop primary key (CustomerId) ;

Foreign Key Query

1. create table table_name (CustomerId int, foreign key (CustomerId) references Suppliers (S_ID) ) ;

Description :
1. This query will make a foreign key.
Example : 
1. create table Customer (CustomerId  int , ….,foreign key (CutomerId) references by Suppliers (P_ID) ;

Check Query

1. create table table_name (column_name1 , ……..,check (column_name >0) ) ;

Description :
1. This query will check a condition before inserting a data into the database.

Example :
1. create table Customer ( CustomerId int , check (CustomerId >0)) ;

Default Query

1. create table Customer (CustomerId int , City varchar(size) default '' Rangpur '' );

Description : 
1. This query will make a default value for the column .

Example :
1. create table Customer (CustomerId int , City varchar (25) default '' Rangpur '' );
2. alter table Customer City set default '' Rangput '' ;
3. alter table Customer alter City drop default ;

Index Query

1. create index index_name on table_name ( column_name );

Description :
1. This query will make a index for the particular table.

Example :
1. create index Pindex on Persons ( LastName ) ;
Drop Query

1.  alter table table_name drop index index_name ;
2. drop table table_name ;
3. drop database database_name ;
4. truncate table table_name ;

Description : 
1. This query will drop the index.
2. This query will drop table.
3. This query will drop the database.
4. This query will delete all the data from the table but never drop the table.

Example :
1.  alter table table_name drop index index_name ;
2. drop table table_name ;
3. drop database database_name ;
4. truncate table table_name ;

Alter Query

1. alter table table_name add column_name data_type ;
2. alter table table_name drop column column_name ;

Description :
1. This query will add a column in the table .
2. This query will drop a column from the table.
3. Alter work with the table not the data of the table.

Example :
1. alter table table_name add column_name data_type ;
2. alter table table_name drop column column_name ;

Auto Increment Query

1. create table table_name ( id int not null primary key auto_increment , …..) ;

Description : 
1. This query will make a column the data of that column will be automatically increment.

Example :  
1. create table Customer ( CusomterId int not null primary key auto_increment, ………) ;

View Query 

1. create view view_name as select * from table_name ;
2. drop view view_name ;

Description : 
1. This query will make a copy of that table which you select and copy all the data from that .

Example : 
1. create view Temporary_Information as select * from Customer ;
2. drop view view_name ;

Date Query

1. now() ; 
2. curdate() ;
3. curtime() ;
4. date (date); 
5. extract(unit from date) ;
6. date_add(date, interval expr type) ;
7. date_sub(date, interval expr type) ;
8. datediff(date1, date2)  ;
9. date_format(date, format) ;

Description :
1. This query return the current date and time.
2. This query return the current date.
3. This query return the current time.
4. This query extracts the date part of a date or date or date/time expression.
5. This query return a single part of date/time.
6. This query add a specified time interval to a date.
7. This query subtracts as specified time interval from a date.
8. This query return the of days between two dates.
9. This query displays date/time date in different formats.

Example :
1. select now() ;
2. select curdate() ;
3. select curtime() ;
4. select ProdubtName, date(OrderDate) as orderDate from Orders where OrderId = 1 ;
5. select extract (year from OrderDate) as OrderYear , ……… ;
6. select OrderId , date_add (OrderDate, interval 30 day) as OrderPayDate from Orders.
7. select OrderId , date_sub (OrderDate, interval 5 day) as OrderPayDate from Orders.
8. select datediff ('2014-11-30' , '2014-11-29) as DiffDate ;
9. date_format (now(), ' %m-%d%Y ') ;

Unit Value For The Extract Query : 5

MICROSECOND               
SECOND
MINUTE
HOUR
DAY
WEEK
MONTH
QUARTER
YEAR
SECOND_MICROSECOND
MINUTE_MICROSECOND
MINUTE_SECOND
HOUR_MICROSECOND
HOUR_SECOND
HOUR_MINUTE
DAY_MICROSECOND
DAY_SECOND
DAY_MINUTE
DAY_HOUR
YEAR_MONTH


Type Value For The Date_Add Query : 6 , 7

MICROSECOND
SECOND
MINUTE
HOUR
DAY
WEEK
MONTH
QUARTER
YEAR
SECOND_MICROSECOND
MINUTE_MICROSECOND
MINUTE_SECOND
HOUR_MICROSECOND
HOUR_SECOND
HOUR_MINUTE
DAY_MICROSECOND
DAY_SECOND
DAY_MINUTE
DAY_HOUR
YEAR_MONTH


Format And Date Description : 9 

%a
Abbreviated weekday name (Sun-Sat)
%b
Abbreviated month name (Jan-Dec)
%c
Month, numeric (0-12)
%D
Day of month with English suffix (0th, 1st, 2nd, 3rd)
%d
Day of month, numeric (00-31)
%e
Day of month, numeric (0-31)
%f
Microseconds (000000-999999)
%H
Hour (00-23)
%h
Hour (01-12)
%I
Hour (01-12)
%i
Minutes, numeric (00-59)
%j
Day of year (001-366)
%k
Hour (0-23)
%l
Hour (1-12)
%M
Month name (January-December)
%m
Month, numeric (00-12)
%p
AM or PM
%r
Time, 12-hour (hh:mm:ss followed by AM or PM)
%S
Seconds (00-59)
%s
Seconds (00-59)
%T
Time, 24-hour (hh:mm:ss)
%U
Week (00-53) where Sunday is the first day of week
%u
Week (00-53) where Monday is the first day of week
%V
Week (01-53) where Sunday is the first day of week, used with %X
%v
Week (01-53) where Monday is the first day of week, used with %x
%W
Weekday name (Sunday-Saturday)
%w
Day of the week (0=Sunday, 6=Saturday)
%X
Year for the week where Sunday is the first day of week, four digits, used with %V
%x
Year for the week where Monday is the first day of week, four digits, used with %v
%Y
Year, numeric, four digits
%y
Year, numeric, two digits


Null Values Query 

1. select LastName, FirstName, Address from Persons where Address is null ;
2. select LastName, FirstName, Address from Persons where Address is not null ;

Description :
1. This query will give you data according to the condition null.

Example :
1. 1. select LastName, FirstName, Address from Persons where Address is null ;
2. select LastName, FirstName, Address from Persons where Address is not null ;

Null Function Query

1. select ProductName, UnitPrice*(UnitInStock+ifnull(UnitsOnOrder,0)) from Products ;

Description :
1. This query will give you a data with null value function.

Example :
1. select ProductName, UnitPrice*(UnitInStock+ifnull(UnitsOnOrder,0)) from Products ;





Data Types Query

SQL General Data Types : 

Data type
Description
CHARACTER(n)
Character string. Fixed-length n
VARCHAR(n) or
CHARACTER VARYING(n)
Character string. Variable length. Maximum length n
BINARY(n)
Binary string. Fixed-length n
BOOLEAN
Stores TRUE or FALSE values
VARBINARY(n) or
BINARY VARYING(n)
Binary string. Variable length. Maximum length n
INTEGER(p)
Integer numerical (no decimal). Precision p
SMALLINT
Integer numerical (no decimal). Precision 5
INTEGER
Integer numerical (no decimal). Precision 10
BIGINT
Integer numerical (no decimal). Precision 19
DECIMAL(p,s)
Exact numerical, precision p, scale s. Example: decimal(5,2) is a number that has 3 digits before the decimal and 2 digits after the decimal
NUMERIC(p,s)
Exact numerical, precision p, scale s. (Same as DECIMAL)
FLOAT(p)
Approximate numerical, mantissa precision p. A floating number in base 10 exponential notation. The size argument for this type consists of a single number specifying the minimum precision
REAL
Approximate numerical, mantissa precision 7
FLOAT
Approximate numerical, mantissa precision 16
DOUBLE PRECISION
Approximate numerical, mantissa precision 16
DATE
Stores year, month, and day values
TIME
Stores hour, minute, and second values
TIMESTAMP
Stores year, month, day, hour, minute, and second values
INTERVAL
Composed of a number of integer fields, representing a period of time, depending on the type of interval
ARRAY
A set-length and ordered collection of elements
MULTISET
A variable-length and unordered collection of elements
XML
Stores XML data

SQL Data Type Quick Reference :

Data type
Access
SQLServer
Oracle
MySQL
PostgreSQL
boolean
Yes/No
Bit
Byte
N/A
Boolean
integer
Number (integer)
Int
Number
Int
Integer
Int
Integer
float
Number (single)
Float
Real
Number
Float
Numeric
currency
Currency
Money
N/A
N/A
Money
string (fixed)
N/A
Char
Char
Char
Char
string (variable)
Text (<256)
Memo (65k+)
Varchar
Varchar
Varchar2
Varchar
Varchar
binary object
OLE Object Memo
Binary (fixed up to 8K)
Varbinary (<8K)
Image (<2GB)
Long
Raw
Blob
Text
Binary
Varbinary

Database Data Types Query
Text Types :

Data type
Description
CHAR(size)
Holds a fixed length string (can contain letters, numbers, and special characters). The fixed size is specified in parenthesis. Can store up to 255 characters
VARCHAR(size)
Holds a variable length string (can contain letters, numbers, and special characters). The maximum size is specified in parenthesis. Can store up to 255 characters. Note: If you put a greater value than 255 it will be converted to a TEXT type
TINYTEXT
Holds a string with a maximum length of 255 characters
TEXT
Holds a string with a maximum length of 65,535 characters
BLOB
For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data
MEDIUMTEXT
Holds a string with a maximum length of 16,777,215 characters
MEDIUMBLOB
For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data
LONGTEXT
Holds a string with a maximum length of 4,294,967,295 characters
LONGBLOB
For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data
ENUM(x,y,z,etc.)
Let you enter a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted.
Note: The values are sorted in the order you enter them.
You enter the possible values in this format: ENUM('X','Y','Z')
SET
Similar to ENUM except that SET may contain up to 64 list items and can store more than one choice

Number Types :

Data type
Description
TINYINT(size)
-128 to 127 normal. 0 to 255 UNSIGNED*. The maximum number of digits may be specified in parenthesis
SMALLINT(size)
-32768 to 32767 normal. 0 to 65535 UNSIGNED*. The maximum number of digits may be specified in parenthesis
MEDIUMINT(size)
-8388608 to 8388607 normal. 0 to 16777215 UNSIGNED*. The maximum number of digits may be specified in parenthesis
INT(size)
-2147483648 to 2147483647 normal. 0 to 4294967295 UNSIGNED*. The maximum number of digits may be specified in parenthesis
BIGINT(size)
-9223372036854775808 to 9223372036854775807 normal. 0 to 18446744073709551615 UNSIGNED*. The maximum number of digits may be specified in parenthesis
FLOAT(size,d)
A small number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter
DOUBLE(size,d)
A large number with a floating decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter
DECIMAL(size,d)
A DOUBLE stored as a string , allowing for a fixed decimal point. The maximum number of digits may be specified in the size parameter. The maximum number of digits to the right of the decimal point is specified in the d parameter

Date Types :

Data type
Description
DATE()
A date. Format: YYYY-MM-DD
Note: The supported range is from '1000-01-01' to '9999-12-31'
DATETIME()
*A date and time combination. Format: YYYY-MM-DD HH:MI:SS
Note: The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'
TIMESTAMP()
*A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD HH:MI:SS
Note: The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC
TIME()
A time. Format: HH:MI:SS
Note: The supported range is from '-838:59:59' to '838:59:59'
YEAR()
A year in two-digit or four-digit format.
Note: Values allowed in four-digit format: 1901 to 2155. Values allowed in two-digit format: 70 to 69, representing years from 1970 to 2069

String Types :

Data type
Description
Storage
char(n)
Fixed width character string. Maximum 8,000 characters
Defined width
varchar(n)
Variable width character string. Maximum 8,000 characters
2 bytes + number of chars
varchar(max)
Variable width character string. Maximum 1,073,741,824 characters
2 bytes + number of chars
text
Variable width character string. Maximum 2GB of text data
4 bytes + number of chars
nchar
Fixed width Unicode string. Maximum 4,000 characters
Defined width x 2
nvarchar
Variable width Unicode string. Maximum 4,000 characters
 
nvarchar(max)
Variable width Unicode string. Maximum 536,870,912 characters
 
ntext
Variable width Unicode string. Maximum 2GB of text data
 
bit
Allows 0, 1, or NULL
 
binary(n)
Fixed width binary string. Maximum 8,000 bytes
 
varbinary
Variable width binary string. Maximum 8,000 bytes
 
varbinary(max)
Variable width binary string. Maximum 2GB
 
image
Variable width binary string. Maximum 2GB


Date Types :

Data type
Description
Storage
datetime
From January 1, 1753 to December 31, 9999 with an accuracy of 3.33 milliseconds
8 bytes
datetime2
From January 1, 0001 to December 31, 9999 with an accuracy of 100 nanoseconds
6-8 bytes
smalldatetime
From January 1, 1900 to June 6, 2079 with an accuracy of 1 minute
4 bytes
date
Store a date only. From January 1, 0001 to December 31, 9999
3 bytes
time
Store a time only to an accuracy of 100 nanoseconds
3-5 bytes
datetimeoffset
The same as datetime2 with the addition of a time zone offset
8-10 bytes
timestamp
Stores a unique number that gets updated every time a row gets created or modified. The timestamp value is based upon an internal clock and does not correspond to real time. Each table may have only one timestamp variable


Other Data Types :

Data type
Description
sql_variant
Stores up to 8,000 bytes of data of various data types, except text, ntext, and timestamp
uniqueidentifier
Stores a globally unique identifier (GUID)
xml
Stores XML formatted data. Maximum 2GB
cursor
Stores a reference to a cursor used for database operations
table
Stores a result-set for later processing

SQL Function

Avg Function

1. select avg (column_name) from table_name ;

Description :
1. This query will give you the average value of the column which you select .

Example :
1. select avg (price)  as PriceAverage from Products ;

 
Count Function

1. select count (column_name ) from table_name ;

Description :
1. This function will give you the number of row in a  column which you selected.

Example : 
1. select count ( CustomerId ) as OrderFromCustomer from Orders ;
2. select count ( distinct CustomerId ) as OrderFromCustomer from Orders ;

First Function

1. This function is the alternative of the Limit Query in the Mysql server.
2. You will find Limit Query above.

Last Function

1. There is no last function in the Mysql server but here is the alternative for this.

Example :
1. select CustomerName from Customer ordre by CustomerId desc limit 1;

Max Function

1. select max ( column_name ) from table_name ;

Description :
1. This function will give you the maximum value which column you select .

Example :
1. select max(price) as HigestPrice from Products ;



Min Function

1. select min(column_name) from table_name ;

Description :
1. This function will give you the min value which column you select .

Example : 
1. select min (price) as HigestPrice from Products ;


Sum Function

1. select sum (column_name ) from table_name ;

Description :
1. This function will give you the sum value of a column which you selected .

Example :
1. select sum (Quantity) as TotalItemsOrdered Frrom OrdreDetails ;

Group By Funtion

1. select column_name , aggregate_function (column_nam) from table name where column_name operator value group by column_name ;

Description : 
1. This function is used in conjunction with the aggregate functions to group reslut-set by one or more columns
2. When you use an aggregate function and want to show the value in the different column then you need to use group by funcion.

Example :
1. select Shippers.ShipperName, count(Orders.OrderID) as NumberOfOrders from Orders left join Shippers on Orders.ShipperID=Shippers.ShipperID group by ShipperName;


Having Function

1. select coulmn_name , aggregate_funtion (column_name) from table_nam where table_name where column_name operator value group by column_name havin aggregate_function (column_name) operator value ;

Description :
1. This function is added to SQL because where clause is not working in aggregate function.

Example : 
1. select Emplyees.LastName , count (Orders.OrderID) as NumberOfOrders from (Orders inner join Employees on Orders.EmployeeID = Employees.EmployeeId ) group by LastName having count(Orders.OrderID) > 10 ;

Ucase Function

1. select ucase (column_name ) from table_name ;

Description :
1. This function converts the value of a field to uppercase .

Example :
1. select ucase (CustomerName) from Customers ;

Lcase Function

1. select lcase (column_name ) from table_name ;

Description :
1. This function converts the value of a field to lowercase .

Example :
1. select lcase (CustomerName) from Customers ;



Mid Function

1. select mid (column_name , start , length ) as some_name from table_name ;

Description :
1. This function will give you a substring .

Example : 
1. select mid (CustomerName , 1 , 4 ) from Customers ;

Length Function

1. select length( column_name ) from table_name ;

Description :
1. This function will give you the length of the value in a text field .

Example :
1. select length( Customer_name ) from Customers ;

Round Function

1. select round ( column_name , decimals ) from table_name ;

Description :
1. This function will give the value after ( . ) Points as you select.

Example : 
1. select round(price, 0) from CustomerPrice ;

Now function

1. select now() from the table_name ;

Description :
1. This function will give you the current time of your system .


Example :
1. select ProductName , Price, now () as perDate from Products ;

Format Function

1. select format (column_name,format ) from table_name ;

Description : 
1. This function is used to format how a field is to be displayed.

Example :
1. select ProductName , price , format ( now(), 'YYYY-MM-DD ) as Perdate from Products ;

Done
